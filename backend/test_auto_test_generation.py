#!/usr/bin/env python3
"""
Test script for automatic test case generation
Tests the feature where AI generates test cases for function-only code
"""

import requests
import json

BASE_URL = "http://localhost:5000/api/ai"


def print_section(title):
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70)


def test_python_function_only():
    """Test Python code with only function definitions (no main)"""
    print_section("TEST 1: Python Function-Only Code")
    
    code = """
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n - 1)

def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)
"""
    
    print("Code (function-only, no main):")
    print(code)
    print("\nSending to API (should auto-generate test cases)...")
    
    response = requests.post(
        f"{BASE_URL}/execute-code",
        json={
            "code": code,
            "language": "python",
            "context": "Functions for computing factorial and fibonacci numbers"
        }
    )
    
    result = response.json()
    print(f"\nStatus: {response.status_code}")
    print(f"Success: {result.get('success')}")
    print(f"Auto-Generated Tests: {result.get('autoGeneratedTests')}")
    
    if result.get('autoGeneratedTests'):
        print(f"\n✓ AI Generated {len(result.get('generatedTestCases', []))} Test Cases:")
        for i, test in enumerate(result.get('generatedTestCases', []), 1):
            print(f"\n  Test {i}: {test.get('description')}")
            print(f"    Input: {test.get('input')[:50]}...")
            print(f"    Expected: {test.get('expectedOutput')}")
        
        print("\nTest Results:")
        for test_result in result.get('testResults', []):
            status = "✓ PASS" if test_result['passed'] else "✗ FAIL"
            print(f"  {status} - {test_result['id']}")
            print(f"    Expected: {test_result['expectedOutput']}")
            print(f"    Actual: {test_result['actualOutput']}")
    else:
        print("✗ No tests were auto-generated")
    
    print(f"\nExecution Time: {result.get('executionTime')}ms")


def test_javascript_function_only():
    """Test JavaScript code with only function definitions"""
    print_section("TEST 2: JavaScript Function-Only Code")
    
    code = """
function add(a, b) {
    return a + b;
}

function multiply(a, b) {
    return a * b;
}

function isPalindrome(str) {
    const cleaned = str.toLowerCase().replace(/[^a-z0-9]/g, '');
    return cleaned === cleaned.split('').reverse().join('');
}
"""
    
    print("Code (function-only, no main execution):")
    print(code)
    print("\nSending to API (should auto-generate test cases)...")
    
    response = requests.post(
        f"{BASE_URL}/execute-code",
        json={
            "code": code,
            "language": "javascript",
            "context": "Basic math functions and string palindrome checker"
        }
    )
    
    result = response.json()
    print(f"\nStatus: {response.status_code}")
    print(f"Success: {result.get('success')}")
    print(f"Auto-Generated Tests: {result.get('autoGeneratedTests')}")
    
    if result.get('autoGeneratedTests'):
        print(f"\n✓ AI Generated {len(result.get('generatedTestCases', []))} Test Cases:")
        for i, test in enumerate(result.get('generatedTestCases', []), 1):
            print(f"\n  Test {i}: {test.get('description')}")
            print(f"    Input: {test.get('input')[:60]}...")
            print(f"    Expected: {test.get('expectedOutput')}")
        
        print("\nTest Results:")
        for test_result in result.get('testResults', []):
            status = "✓ PASS" if test_result['passed'] else "✗ FAIL"
            print(f"  {status} - {test_result['id']}")
            print(f"    Expected: {test_result['expectedOutput']}")
            print(f"    Actual: {test_result['actualOutput']}")
    else:
        print("✗ No tests were auto-generated")
    
    print(f"\nExecution Time: {result.get('executionTime')}ms")


def test_python_with_main():
    """Test Python code WITH main - should NOT auto-generate"""
    print_section("TEST 3: Python Code WITH Main (No Auto-Gen Expected)")
    
    code = """
def greet(name):
    return f"Hello, {name}!"

if __name__ == "__main__":
    print(greet("World"))
    print(greet("Python"))
"""
    
    print("Code (has main block):")
    print(code)
    print("\nSending to API (should NOT auto-generate, has main)...")
    
    response = requests.post(
        f"{BASE_URL}/execute-code",
        json={
            "code": code,
            "language": "python"
        }
    )
    
    result = response.json()
    print(f"\nStatus: {response.status_code}")
    print(f"Success: {result.get('success')}")
    print(f"Auto-Generated Tests: {result.get('autoGeneratedTests')}")
    print(f"Output:\n{result.get('output')}")
    
    if not result.get('autoGeneratedTests'):
        print("\n✓ Correctly detected main block - no auto-generation")
    else:
        print("\n✗ Should not have auto-generated tests")


def test_manual_test_cases():
    """Test with manually provided test cases - should use those instead"""
    print_section("TEST 4: Manual Test Cases Provided (No Auto-Gen)")
    
    code = """
def double(x):
    return x * 2
"""
    
    manual_tests = [
        {
            "id": "manual-1",
            "input": "print(double(5))",
            "expectedOutput": "10",
            "description": "Test doubling 5"
        },
        {
            "id": "manual-2",
            "input": "print(double(0))",
            "expectedOutput": "0",
            "description": "Test doubling 0"
        }
    ]
    
    print("Code (function-only):")
    print(code)
    print("\nManual test cases provided:")
    print(json.dumps(manual_tests, indent=2))
    print("\nSending to API (should use manual tests)...")
    
    response = requests.post(
        f"{BASE_URL}/execute-code",
        json={
            "code": code,
            "language": "python",
            "testCases": manual_tests
        }
    )
    
    result = response.json()
    print(f"\nStatus: {response.status_code}")
    print(f"Success: {result.get('success')}")
    print(f"Auto-Generated Tests: {result.get('autoGeneratedTests')}")
    
    print("\nTest Results:")
    for test_result in result.get('testResults', []):
        status = "✓ PASS" if test_result['passed'] else "✗ FAIL"
        print(f"  {status} - {test_result['id']}")
    
    if not result.get('autoGeneratedTests'):
        print("\n✓ Correctly used manual test cases")
    else:
        print("\n✗ Should have used manual tests, not auto-generated")


if __name__ == "__main__":
    print("\n╔" + "=" * 68 + "╗")
    print("║" + " " * 15 + "AUTO TEST GENERATION TEST SUITE" + " " * 21 + "║")
    print("╚" + "=" * 68 + "╝")
    
    try:
        test_python_function_only()
        test_javascript_function_only()
        test_python_with_main()
        test_manual_test_cases()
        
        print("\n" + "=" * 70)
        print("  ALL TESTS COMPLETED")
        print("=" * 70 + "\n")
        
    except requests.exceptions.ConnectionError:
        print("\n✗ ERROR: Could not connect to backend.")
        print("  Make sure the Flask server is running on port 5000")
        print("  Run: cd backend && python main.py\n")
    except Exception as e:
        print(f"\n✗ ERROR: {e}")
        import traceback
        traceback.print_exc()
