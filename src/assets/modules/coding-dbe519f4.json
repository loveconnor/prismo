{
  "name": "coding-dbe519f4",
  "title": "Master Loops and Functions in Python",
  "description": "Learn to write efficient Python code using loops and functions through hands-on practice exercises.",
  "skills": [
    "Loops",
    "functions",
    "coding"
  ],
  "widgets": [
    {
      "id": "step-prompt",
      "metadata": {
        "id": "step-prompt",
        "title": "Introduction to Loops and Functions",
        "description": "Displays task or question text with optional formatting",
        "skills": [
          "comprehension",
          "reading"
        ],
        "difficulty": 2,
        "estimated_time": 30,
        "input_type": "text",
        "output_type": "scaffold",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": false
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "title": "What You'll Learn",
        "prompt": "In this module, you'll master two fundamental programming concepts: loops and functions.\n\nLoops allow you to repeat code blocks efficiently, while functions help you organize and reuse code. Together, they form the foundation of clean, efficient Python programming.\n\nBy the end of this module, you'll be able to:\n• Write for and while loops to iterate through data\n• Create and call functions with parameters and return values\n• Combine loops and functions to solve real-world problems",
        "estimatedTime": 30
      },
      "position": 1,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": [
          "reflection",
          "learning"
        ],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "info",
        "title": "Ready to Begin?",
        "message": "You're about to dive into the world of loops and functions.",
        "explanation": "These concepts are essential for writing efficient and maintainable Python code. Understanding them well will unlock your ability to solve complex programming challenges.",
        "nextSteps": [
          "Learn about for loops and iteration",
          "Understand function definitions and calls",
          "Practice combining loops and functions"
        ]
      },
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": [
          "self-assessment",
          "metacognition"
        ],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "minLabel": "Not Confident",
        "maxLabel": "Very Confident",
        "question": "How confident are you with loops and functions?"
      },
      "dependencies_met": true
    },
    {
      "id": "code-editor",
      "metadata": {
        "id": "code-editor",
        "title": "Code Editor",
        "description": "Interactive code editor with run and reset functionality",
        "skills": [
          "programming",
          "debugging",
          "syntax"
        ],
        "category": "coding",
        "difficulty": 3,
        "estimated_time": 300,
        "input_type": "code",
        "output_type": "visualization",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": true,
          "alternative_widgets": [
            "step-prompt"
          ]
        },
        "version": "1.0.0"
      },
      "props": {
        "title": "Exercise 1: Sum Numbers with a Loop",
        "language": "python",
        "starterCode": "# Write a function that sums all numbers from 1 to n\n# Use a for loop to iterate\n\ndef sum_numbers(n):\n    total = 0\n    # TODO: Add your loop here\n    return total\n\n# Test your function\nprint(sum_numbers(5))  # Should print 15\nprint(sum_numbers(10)) # Should print 55",
        "testCases": [
          {
            "input": "sum_numbers(5)",
            "expected": "15",
            "description": "Sum of 1 to 5 should be 15"
          },
          {
            "input": "sum_numbers(10)",
            "expected": "55",
            "description": "Sum of 1 to 10 should be 55"
          },
          {
            "input": "sum_numbers(0)",
            "expected": "0",
            "description": "Sum of 1 to 0 should be 0"
          }
        ]
      },
      "position": 2,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": [
          "reflection",
          "learning"
        ],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "success",
        "title": "Excellent Work!",
        "message": "You successfully combined a function with a for loop to solve the problem.",
        "explanation": "This exercise demonstrates the key pattern: functions provide organization, and loops provide iteration. The for loop iterates from 1 to n, accumulating the sum in each iteration.",
        "nextSteps": [
          "Review the loop structure you used",
          "Think about edge cases like n=0",
          "Move on to the next exercise"
        ]
      },
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": [
          "self-assessment",
          "metacognition"
        ],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "minLabel": "Not Confident",
        "maxLabel": "Very Confident",
        "question": "How confident are you with using for loops in functions?"
      },
      "dependencies_met": true
    },
    {
      "id": "code-editor",
      "metadata": {
        "id": "code-editor",
        "title": "Code Editor",
        "description": "Interactive code editor with run and reset functionality",
        "skills": [
          "programming",
          "debugging",
          "syntax"
        ],
        "category": "coding",
        "difficulty": 3,
        "estimated_time": 300,
        "input_type": "code",
        "output_type": "visualization",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": true,
          "alternative_widgets": [
            "step-prompt"
          ]
        },
        "version": "1.0.0"
      },
      "props": {
        "title": "Exercise 2: Filter Even Numbers",
        "language": "python",
        "starterCode": "# Write a function that returns a list of even numbers from 1 to n\n# Use a for loop and list to collect results\n\ndef get_even_numbers(n):\n    evens = []\n    # TODO: Add your loop here\n    return evens\n\n# Test your function\nprint(get_even_numbers(10)) # Should print [2, 4, 6, 8, 10]\nprint(get_even_numbers(5))  # Should print [2, 4]",
        "testCases": [
          {
            "input": "get_even_numbers(10)",
            "expected": "[2, 4, 6, 8, 10]",
            "description": "Even numbers from 1 to 10"
          },
          {
            "input": "get_even_numbers(5)",
            "expected": "[2, 4]",
            "description": "Even numbers from 1 to 5"
          },
          {
            "input": "get_even_numbers(1)",
            "expected": "[]",
            "description": "No even numbers from 1 to 1"
          }
        ]
      },
      "position": 3,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": [
          "reflection",
          "learning"
        ],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "success",
        "title": "Perfect!",
        "message": "You've mastered filtering data with loops and conditionals inside functions.",
        "explanation": "This exercise introduces filtering: using an if statement within your loop to selectively add items to a list. This is a powerful pattern for data processing.",
        "nextSteps": [
          "Consider how you could use this pattern with other conditions",
          "Think about performance with very large numbers",
          "Celebrate your progress on loops and functions!"
        ]
      },
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": [
          "self-assessment",
          "metacognition"
        ],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "minLabel": "Not Confident",
        "maxLabel": "Very Confident",
        "question": "How confident are you combining loops with conditionals in functions?"
      },
      "dependencies_met": true
    }
  ],
  "completion_criteria": {
    "required_widgets": [
      "step-prompt",
      "code-editor",
      "code-editor"
    ],
    "min_completion_percentage": 80,
    "max_attempts": 3,
    "time_limit": 2700
  },
  "estimated_duration": 2700,
  "version": "1.0.0",
  "_metadata": {
    "generated_at": "2025-10-26T08:14:12.105052",
    "module_id": "df5a490c-503f-4104-be5a-907594f4d37c",
    "saved_to_filesystem": true
  }
}