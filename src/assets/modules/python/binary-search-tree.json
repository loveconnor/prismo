{
  "id": "python-binary-search-tree",
"title": "Python Binary Search Tree",
"description": "Learn to implement a binary search tree data structure in Python with insert and search operations.",
"skills": ["programming", "Python", "data-structures", "binary-search-tree", "algorithms", "recursion"],
  "widgets": [
    {
      "id": "step-prompt",
      "metadata": {
        "id": "step-prompt",
        "title": "Step Prompt",
        "description": "Displays task or question text with optional formatting",
        "skills": ["comprehension", "reading"],
        "difficulty": 2,
        "estimated_time": 30,
        "input_type": "text",
        "output_type": "scaffold",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": false
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
"title": "Python Binary Search Tree",
"prompt": "In this module you will create a binary search tree in Python and learn about tree data structures. A binary search tree is a hierarchical data structure where each node has at most two children, and the left child is always smaller than the parent while the right child is always larger. You'll implement the insert and search methods to build a fully functional BST.",
"estimatedTime": 45
      },
      "position": 1,
      "dependencies_met": true
    },
    {
      "id": "code-editor",
      "metadata": {
        "id": "code-editor",
        "title": "Code Editor",
        "description": "Interactive code editor with run and reset functionality",
        "skills": ["programming", "debugging", "syntax"],
        "difficulty": 3,
        "estimated_time": 300,
        "input_type": "code",
        "output_type": "visualization",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": true,
          "alternative_widgets": ["step-prompt"]
        },
        "version": "1.0.0",
        "category": "coding"
      },
      "props": {
"title": "Implement Binary Search Tree",
"language": "python",
"starterCode": "# Binary Search Tree Implementation\n# Complete the BinarySearchTree so that is passes the below tests...\n# and more hidden ones :)\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n    \n    def insert(self, value):\n        # TODO: Implement insert method\n        pass\n    \n    def search(self, value):\n        # TODO: Implement search method\n        pass\n\n# Example usage\nif __name__ == \"__main__\":\n    bst = BinarySearchTree()\n    test_array = [50, 30, 70, 20, 40, 60, 80]\n    \n    # Insert values from array\n    for value in test_array:\n        bst.insert(value)\n    \n    # Test search\n    print(bst.search(40))\n    print(bst.search(100))",
        "placeholder": "Write your code here...",
        "testCases": [
          {
"id": "test-1",
"input": "bst.search(40)",
"expectedOutput": "True",
"description": "Search should return True for value 40 which exists in the tree"
          },
          {
"id": "test-2",
"input": "bst.search(100)",
"expectedOutput": "False",
"description": "Search should return False for value 100 which doesn't exist in the tree"
          },
          {
"id": "test-3",
"input": "bst.search(50)",
"expectedOutput": "True",
"description": "Search should return True for the root value 50"
          }
        ]
      },
      "position": 2,
      "dependencies_met": true
    },
    {
      "id": "hint-panel",
      "metadata": {
        "id": "hint-panel",
        "title": "Hint Panel",
        "description": "Progressive hint disclosure with multiple tiers",
        "skills": ["problem-solving", "guidance"],
        "difficulty": 2,
        "estimated_time": 60,
        "input_type": "checkbox",
        "output_type": "scaffold",
        "dependencies": [],
        "adaptive_hooks": {
          "hint_progression": true,
          "time_extension": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "hints": [
{
"id": "hint-1",
"tier": 1,
"text": "For the insert method: If the tree is empty (self.root is None), create a new Node and set it as the root.",
"revealed": false
},
{
"id": "hint-2",
"tier": 2,
"text": "For the search method: Start at the root and compare values. If the value matches, return True. If searching value is smaller, go left; if larger, go right.",
"revealed": false
},
{
"id": "hint-3",
"tier": 3,
"text": "Both insert and search can be implemented recursively. Create helper methods that take a node and value as parameters.",
"revealed": false
},
{
"id": "hint-4",
"tier": 4,
"text": "For insert: Compare the value with the current node. If smaller, go left; if larger, go right. If you reach None, that's where you insert the new node.",
"revealed": false
},
{
"id": "hint-5",
"tier": 5,
"text": "Complete insert pseudocode: if root is None, create new node. Otherwise, if value < current.value and current.left exists, recurse left. If current.left is None, create new node there. Do the same for right side.",
"revealed": false
},
{
"id": "hint-6",
"tier": 6,
"text": "Complete search pseudocode: if current is None, return False. If current.value == value, return True. If value < current.value, search left subtree. Otherwise, search right subtree.",
"revealed": false
}
        ],
        "maxHintsPerTier": 1
      },
      "position": 3,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": ["reflection", "learning"],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "success",
        "title": "Excellent Work!",
"message": "You've successfully implemented a binary search tree in Python!",
"explanation": "You've learned how to create a fundamental data structure used in computer science. Binary search trees provide efficient O(log n) search, insert, and delete operations when balanced. You implemented both insert and search methods, understanding how to navigate tree structures recursively.",
"nextSteps": [
"Implement a delete method for the BST",
"Learn about balanced trees (AVL, Red-Black trees)",
"Explore tree traversal algorithms (in-order, pre-order, post-order)",
"Try implementing other tree-based data structures"
],
        "showContinueButton": true,
        "autoComplete": true
      },
      "position": 5,
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": ["self-assessment", "metacognition"],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "title": "Rate Your Confidence",
        "description": "How confident do you feel about implementing binary search trees in Python?",
        "scaleLabels": ["Not confident", "Slightly confident", "Moderately confident", "Very confident", "Extremely confident"],
        "autoSubmit": true
      },
      "position": 6,
      "dependencies_met": true
    }
  ],
  "completion_criteria": {
    "required_widgets": ["step-prompt", "code-editor", "feedback-box"],
    "min_completion_percentage": 80,
    "max_attempts": 5,
    "time_limit": 2700
  },
  "estimated_duration": 2700,
  "version": "1.0.0"
}
