{
  "name": "coding-2138e5ea",
  "title": "Mastering Loops and Recursion in Python",
  "description": "Learn fundamental coding concepts including loops and recursion through interactive exercises and real-world examples",
  "skills": [
    "loops",
    "recursion",
    "coding"
  ],
  "widgets": [
    {
      "id": "step-prompt",
      "metadata": {
        "id": "step-prompt",
        "title": "Introduction to Loops and Recursion",
        "description": "Displays task or question text with optional formatting",
        "skills": [
          "comprehension",
          "reading"
        ],
        "difficulty": 2,
        "estimated_time": 30,
        "input_type": "text",
        "output_type": "scaffold",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": false
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "title": "Welcome to Coding Fundamentals",
        "prompt": "In this module, you'll master two essential programming concepts: loops and recursion. Loops allow you to repeat code blocks efficiently, while recursion enables functions to call themselves to solve complex problems. Let's start by understanding how these concepts work and when to use each one."
      },
      "position": 1,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": [
          "reflection",
          "learning"
        ],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "info",
        "title": "Module Overview",
        "message": "You're about to explore two powerful programming concepts that form the foundation of efficient code.",
        "explanation": "Understanding loops and recursion will help you write cleaner, more efficient programs. These concepts are used in nearly every programming project.",
        "nextSteps": [
          "Learn loop syntax and types",
          "Practice writing loop examples",
          "Understand recursion fundamentals"
        ]
      },
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": [
          "self-assessment",
          "metacognition"
        ],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "minLabel": "Not confident",
        "maxLabel": "Very confident",
        "question": "How confident are you with loops and recursion?"
      },
      "dependencies_met": true
    },
    {
      "id": "code-editor",
      "metadata": {
        "id": "code-editor",
        "title": "Code Editor",
        "description": "Interactive code editor with run and reset functionality",
        "skills": [
          "programming",
          "debugging",
          "syntax"
        ],
        "difficulty": 3,
        "estimated_time": 300,
        "input_type": "code",
        "output_type": "visualization",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": true,
          "alternative_widgets": [
            "step-prompt"
          ]
        },
        "version": "1.0.0",
        "category": "coding"
      },
      "props": {
        "title": "Practice: For Loops and While Loops",
        "language": "python",
        "starterCode": "# Exercise 1: Write a for loop to print numbers 1 to 5\nfor i in range(1, 6):\n    print(i)\n\n# Exercise 2: Write a while loop to print numbers 1 to 5\ncounter = 1\nwhile counter <= 5:\n    print(counter)\n    counter += 1",
        "testCases": [
          {
            "input": "",
            "expectedOutput": "1\n2\n3\n4\n5\n1\n2\n3\n4\n5",
            "description": "Both loops should print numbers 1-5"
          }
        ]
      },
      "position": 2,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": [
          "reflection",
          "learning"
        ],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "success",
        "title": "Great Job on Loops!",
        "message": "You've successfully written both for and while loops.",
        "explanation": "For loops are ideal when you know the number of iterations, while while loops work better when the condition is more complex. Both are essential tools in a programmer's toolkit.",
        "nextSteps": [
          "Learn about loop control with break and continue",
          "Move on to recursion concepts",
          "Practice nested loops"
        ]
      },
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": [
          "self-assessment",
          "metacognition"
        ],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "minLabel": "Need more practice",
        "maxLabel": "Very confident",
        "question": "How confident are you with writing loops?"
      },
      "dependencies_met": true
    },
    {
      "id": "code-editor",
      "metadata": {
        "id": "code-editor",
        "title": "Code Editor",
        "description": "Interactive code editor with run and reset functionality",
        "skills": [
          "programming",
          "debugging",
          "syntax"
        ],
        "difficulty": 3,
        "estimated_time": 300,
        "input_type": "code",
        "output_type": "visualization",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true,
          "hint_progression": true,
          "alternative_widgets": [
            "step-prompt"
          ]
        },
        "version": "1.0.0",
        "category": "coding"
      },
      "props": {
        "title": "Challenge: Understanding Recursion",
        "language": "python",
        "starterCode": "# Write a recursive function to calculate factorial\n# factorial(5) should return 120\n# Hint: factorial(n) = n * factorial(n-1), with base case factorial(1) = 1\n\ndef factorial(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    else:\n        return n * factorial(n - 1)\n\n# Test your function\nprint(factorial(5))",
        "testCases": [
          {
            "input": "",
            "expectedOutput": "120",
            "description": "factorial(5) should return 120"
          }
        ]
      },
      "position": 3,
      "dependencies_met": true
    },
    {
      "id": "feedback-box",
      "metadata": {
        "id": "feedback-box",
        "title": "Feedback Box",
        "description": "Shows correctness, explanation, and next steps",
        "skills": [
          "reflection",
          "learning"
        ],
        "difficulty": 2,
        "estimated_time": 45,
        "input_type": "text",
        "output_type": "feedback",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "type": "success",
        "title": "Excellent Work on Recursion!",
        "message": "You've successfully implemented a recursive factorial function.",
        "explanation": "Recursion works by having a function call itself with a simpler version of the problem until it reaches a base case. The key is always defining when to stop (base case) and how to make progress toward that base case.",
        "nextSteps": [
          "Practice more recursive problems",
          "Compare loops vs recursion performance",
          "Review module completion summary"
        ]
      },
      "dependencies_met": true
    },
    {
      "id": "confidence-meter",
      "metadata": {
        "id": "confidence-meter",
        "title": "Confidence Meter",
        "description": "Self-rating slider for confidence assessment",
        "skills": [
          "self-assessment",
          "metacognition"
        ],
        "difficulty": 2,
        "estimated_time": 20,
        "input_type": "slider",
        "output_type": "progress",
        "dependencies": [],
        "adaptive_hooks": {
          "difficulty_adjustment": true
        },
        "version": "1.0.0",
        "category": "core"
      },
      "props": {
        "minLabel": "Still learning",
        "maxLabel": "Mastered it",
        "question": "How confident are you with recursive functions?"
      },
      "dependencies_met": true
    }
  ],
  "completion_criteria": {
    "required_widgets": [
      "step-prompt",
      "code-editor",
      "code-editor"
    ],
    "min_completion_percentage": 80,
    "max_attempts": 3,
    "time_limit": 1800
  },
  "estimated_duration": 1800,
  "version": "1.0.0",
  "_metadata": {
    "generated_at": "2025-10-26T06:04:57.848147",
    "module_id": "0a86331c-e885-4ced-a70a-b6a386977095",
    "saved_to_filesystem": true
  }
}